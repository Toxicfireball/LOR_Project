# Generated by Django 5.1.6 on 2025-06-14 09:20

import django.db.models.deletion
import django_summernote.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('campaigns', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbilityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ClassFeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField()),
                ('level_prerequisite', models.CharField(blank=True, max_length=512)),
                ('feat_type', models.CharField(max_length=512)),
                ('class_name', models.CharField(blank=True, max_length=512)),
                ('race', models.CharField(blank=True, max_length=512)),
                ('tags', models.TextField(blank=True)),
                ('prerequisites', models.TextField(blank=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('tier', models.IntegerField()),
                ('bonus', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('bonus', models.IntegerField(help_text='e.g. +2 for Expert')),
            ],
        ),
        migrations.CreateModel(
            name='RaceTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text="Identifier for formulas, e.g. 'bloodline_points'", unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Rulebook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ability', models.CharField(help_text='e.g., DEX, INT', max_length=3)),
                ('is_advanced', models.BooleanField(default=False, help_text="Advanced skills can't be increased normally.")),
            ],
        ),
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ability', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='UniversalLevelFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(help_text='Character level (e.g. 1, 2, 3 …).', unique=True)),
                ('grants_general_feat', models.BooleanField(default=False, help_text='If True, then at this level every class gains a General Feat.')),
                ('grants_asi', models.BooleanField(default=False, help_text='If True, then at this level every class gains an ASI.')),
            ],
            options={
                'verbose_name': 'Universal Level Feature',
                'verbose_name_plural': 'Universal Level Features',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('damage', models.CharField(help_text='e.g., 1d8 Piercing', max_length=50)),
                ('category', models.CharField(choices=[('simple', 'Simple'), ('martial', 'Martial'), ('special', 'Special')], max_length=10)),
                ('is_melee', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeaponTrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('requires_value', models.BooleanField(default=False, help_text='e.g., Brutal D8/D10 etc.')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('class_ID', models.TextField(blank=True)),
                ('hit_die', models.PositiveSmallIntegerField(choices=[(4, 'd4'), (6, 'd6'), (8, 'd8'), (10, 'd10'), (12, 'd12')], default=8, help_text='Your class’s Hit Die')),
                ('primary_image', models.ImageField(blank=True, help_text='Upload the main portrait or icon for this class.', null=True, upload_to='class_images/primary/')),
                ('secondary_image', models.ImageField(blank=True, help_text='Upload a second image (e.g. a symbol or alternate art) for this class.', null=True, upload_to='class_images/secondary/')),
                ('tertiary_image', models.ImageField(blank=True, help_text='Upload a thumbnail or list‐page image for this class.', null=True, upload_to='class_images/tertiary/')),
                ('key_abilities', models.ManyToManyField(help_text='Select exactly one or two key ability scores for this class.', to='characters.abilityscore')),
                ('tags', models.ManyToManyField(blank=True, help_text='High‑level archetype tags (e.g. Martial, Spellcaster…)', related_name='classes', to='characters.classtag')),
            ],
        ),
        migrations.CreateModel(
            name='ClassFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saving_throw_required', models.BooleanField(default=False, help_text='Does this ability allow a saving throw?')),
                ('saving_throw_type', models.CharField(blank=True, choices=[('reflex', 'Reflex'), ('fortitude', 'Fortitude'), ('will', 'Will')], help_text='Which saving throw?', max_length=10, null=True)),
                ('min_level', models.PositiveIntegerField(blank=True, help_text='(Optional) extra minimum class-level required to pick this feature, beyond tier mapping.', null=True)),
                ('spell_list', models.CharField(blank=True, choices=[('arcane', 'Arcane'), ('primal', 'Primal'), ('occult', 'Occult'), ('divine', 'Divine')], help_text='Which tradition’s slots these are (Arcane/Primal/Occult/Divine).', max_length=10, null=True)),
                ('tier', models.PositiveIntegerField(blank=True, help_text='(Only for modular_linear subclass_feat) Tier index (1, 2, 3, …).', null=True)),
                ('level_required', models.PositiveIntegerField(blank=True, help_text='(Only for subclass_feats) The minimum class‐level at which this feature is actually gained.', null=True)),
                ('mastery_rank', models.PositiveIntegerField(blank=True, choices=[(0, 'Rank 0'), (1, 'Rank 1'), (2, 'Rank 2'), (3, 'Rank 3'), (4, 'Rank 4')], help_text='(Only for modular_mastery subclass_feat) Mastery Rank (0…4).', null=True)),
                ('saving_throw_granularity', models.CharField(blank=True, choices=[('basic', 'Basic (Success / Failure)'), ('normal', 'Normal (Crit Success / Success / Failure / Crit Failure)')], help_text='Simple or full save table?', max_length=10, null=True)),
                ('saving_throw_basic_success', models.CharField(blank=True, help_text='What happens on a basic save: Success', max_length=255)),
                ('saving_throw_basic_failure', models.CharField(blank=True, help_text='What happens on a basic save: Failure', max_length=255)),
                ('saving_throw_critical_success', models.CharField(blank=True, help_text='What happens on a full save: Critical Success', max_length=255)),
                ('saving_throw_success', models.CharField(blank=True, help_text='What happens on a full save: Success', max_length=255)),
                ('saving_throw_failure', models.CharField(blank=True, help_text='What happens on a full save: Failure', max_length=255)),
                ('saving_throw_critical_failure', models.CharField(blank=True, help_text='What happens on a full save: Critical Failure', max_length=255)),
                ('damage_type', models.CharField(blank=True, choices=[('physical_bludgeoning', 'Physical Bludgeoning'), ('physical_slashing', 'Physical Slashing'), ('physical_piercing', 'Physical Piercing'), ('explosive', 'Explosive'), ('magical_bludgeoning', 'Magical Bludgeoning'), ('magical_slashing', 'Magical Slashing'), ('magical_piercing', 'Magical Piercing'), ('acid', 'Acid'), ('cold', 'Cold'), ('fire', 'Fire'), ('force', 'Force'), ('lightning', 'Lightning'), ('necrotic', 'Necrotic'), ('poison', 'Poison'), ('psychic', 'Psychic'), ('radiant', 'Radiant'), ('thunder', 'Thunder'), ('true', 'True')], help_text='If this feature deals damage, pick its damage type (optional).', max_length=25, null=True)),
                ('scope', models.CharField(choices=[('class_feat', 'Class Feature'), ('subclass_feat', 'Subclass Feature'), ('subclass_choice', 'Subclass Choice'), ('gain_subclass_feat', 'Gain Subclass Feature')], default='class_feat', help_text='Does this belong to the base class, a subclass, or is it a subclass-choice?', max_length=20)),
                ('kind', models.CharField(choices=[('class_feat', 'Class Feat'), ('class_trait', 'Class Trait'), ('skill_feat', 'Skill Feat'), ('martial_mastery', 'Martial Mastery'), ('modify_proficiency', 'Modify Proficiency'), ('spell_table', 'Spell Slot Table'), ('inherent_spell', 'Inherent Spell'), ('gain_proficiency', 'Gain Proficiency')], default='class_feat', help_text='What *type* of feature this is.', max_length=20)),
                ('modify_proficiency_target', models.CharField(blank=True, choices=[('armor', 'Armor'), ('dodge', 'Dodge'), ('perception', 'Perception'), ('initiative', 'Initiative'), ('dc', 'Spell/DC'), ('reflex', 'Reflex Save'), ('fortitude', 'Fortitude Save'), ('will', 'Will Save'), ('weapon', 'Weapon')], help_text='Which proficiency to modify', max_length=20)),
                ('cantrips_formula', models.CharField(blank=True, help_text="Formula for number of cantrips known per class level, e.g. '1 + level//4'", max_length=100)),
                ('spells_known_formula', models.CharField(blank=True, help_text="Formula for number of spells known per class level, e.g. '2 + level//2'", max_length=100)),
                ('spells_prepared_formula', models.CharField(blank=True, help_text="Formula for number of spells you can prepare per class level, e.g. 'intelligence//2 + level//3'", max_length=100)),
                ('action_type', models.CharField(blank=True, choices=[('action_1', 'One Action'), ('action_2', 'Two Actions'), ('action_3', 'Three Actions'), ('reaction', 'Reaction'), ('free', 'Free Action')], help_text='What kind of action this ability consumes.', max_length=10, null=True, verbose_name='Action Required')),
                ('activity_type', models.CharField(choices=[('active', 'Active'), ('passive', 'Passive')], default='active', help_text='For class_trait & subclass_choice: active consumes uses; passive is static.', max_length=7)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('has_options', models.BooleanField(default=False, help_text='If checked, you must add at least one Option below.')),
                ('formula', models.CharField(blank=True, help_text="Any dice+attribute expression, e.g. '1d10+level'", max_length=100)),
                ('uses', models.CharField(blank=True, help_text="How many times? e.g. 'level', '1', 'level/3 round down +1'", max_length=100)),
                ('formula_target', models.CharField(blank=True, choices=[('strength', 'Strength'), ('dexterity', 'Dexterity'), ('intelligence', 'Intelligence'), ('wisdom', 'Wisdom'), ('constitution', 'Constitution'), ('charisma', 'Charisma'), ('acrobatics', 'Acrobatics (DEX)'), ('animal_handling', 'Animal Handling (WIS)'), ('arcana', 'Arcana (INT)'), ('arts', 'Arts (CHA)'), ('athletics', 'Athletics (STR)'), ('charm', 'Charm (CHA)'), ('deception', 'Deception (CHA)'), ('insight', 'Insight (WIS/CHA)'), ('investigation', 'Investigation (INT)'), ('linguistic', 'Linguistic (INT)'), ('local_instinct', 'Local Instinct (WIS)'), ('general_knowledge', 'General Knowledge (INT)'), ('lore', 'Lore (INT)'), ('memory', 'Memory (INT)'), ('sleight_of_hand', 'Sleight of Hand (DEX)'), ('stealth', 'Stealth (DEX)'), ('survival', 'Survival (WIS)'), ('technology', 'Technology (INT)'), ('attack_roll', 'Attack Roll'), ('damage', 'Damage'), ('save_dc', 'Save DC'), ('reflex_save', 'Reflex Save'), ('fortitude_save', 'Fortitude Save'), ('will_save', 'Will Save'), ('initiative', 'Initiative'), ('skill_check', 'Skill Check'), ('temp_HP', 'Temporary Hitpoints'), ('HP', 'Hitpoints'), ('attack', 'Attack Roll'), ('weapon_attack', 'Weapon Attack'), ('melee_attack', 'Melee Attack'), ('ranged_attack', 'Ranged Attack'), ('melee_weapon_attack', 'Melee Weapon Attack'), ('ranged_weapon_attack', 'Ranged Weapon Attack'), ('unarmed_attack', 'Unarmed Attack'), ('spell_attack', 'Spell Attack'), ('spell_damage', 'Spell Damage'), ('weapon_damage', 'Weapon Damage'), ('melee_weapon_damage', 'Melee Weapon Damage'), ('melee_damage', 'Melee Damage'), ('ranged_damage', 'Ranged Weapon Damage'), ('ranged_attack', 'Ranged Attack'), ('unarmed_damage', 'Unarmed Damage')], default=None, help_text='What kind of roll this formula is used for (optional)', max_length=20, null=True)),
                ('character_class', models.ForeignKey(blank=True, help_text='Which class grants this feature?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='characters.characterclass')),
            ],
        ),
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField()),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='characters.characterclass')),
            ],
            options={
                'ordering': ['character_class', 'level'],
            },
        ),
        migrations.CreateModel(
            name='ClassLevelFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.classlevel')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.classfeature')),
            ],
            options={
                'unique_together': {('class_level', 'feature')},
            },
        ),
        migrations.AddField(
            model_name='classlevel',
            name='features',
            field=models.ManyToManyField(help_text='All ClassFeatures (and option‑selections) you get at this level', through='characters.ClassLevelFeature', to='characters.classfeature'),
        ),
        migrations.CreateModel(
            name='ClassSubclass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('code', models.CharField(blank=True, help_text='Optional shorthand code for this subclass', max_length=20)),
                ('modular_rules', models.JSONField(blank=True, help_text='Extra numbers for modular systems.  eg. {"modules_per_mastery":2, "ability_req":{"0":13,"1":15}}', null=True)),
                ('base_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subclasses', to='characters.characterclass')),
            ],
        ),
        migrations.AddField(
            model_name='classfeature',
            name='subclasses',
            field=models.ManyToManyField(blank=True, help_text='For subclass_feat, which subclasses receive this?', related_name='features', to='characters.classsubclass'),
        ),
        migrations.CreateModel(
            name='FeatureOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='characters.classfeature')),
                ('grants_feature', models.ForeignKey(blank=True, help_text='Which other feature does this choice grant?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_by_options', to='characters.classfeature')),
            ],
        ),
        migrations.AddField(
            model_name='classfeature',
            name='modify_proficiency_amount',
            field=models.ForeignKey(blank=True, help_text='Pick the exact proficiency tier to grant (overrides current tier)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.proficiencytier'),
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('size', models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large')], default='medium', help_text='Small / Medium / Large', max_length=6)),
                ('primary_image', models.ImageField(blank=True, help_text='Upload the main portrait or icon for this race.', null=True, upload_to='race_images/primary/')),
                ('secondary_image', models.ImageField(blank=True, help_text='Upload a second image (e.g. a banner or alternate art) for this race.', null=True, upload_to='race_images/secondary/')),
                ('tertiary_image', models.ImageField(blank=True, help_text='Upload a thumbnail or list‐page image for this race.', null=True, upload_to='race_images/tertiary/')),
                ('speed', models.PositiveIntegerField(default=30)),
                ('strength_bonus', models.IntegerField(default=0, help_text='Strength increase')),
                ('dexterity_bonus', models.IntegerField(default=0, help_text='Dexterity increase')),
                ('constitution_bonus', models.IntegerField(default=0, help_text='Constitution increase')),
                ('intelligence_bonus', models.IntegerField(default=0, help_text='Intelligence increase')),
                ('wisdom_bonus', models.IntegerField(default=0, help_text='Wisdom increase')),
                ('charisma_bonus', models.IntegerField(default=0, help_text='Charisma increase')),
                ('tags', models.ManyToManyField(blank=True, to='characters.racetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=501)),
                ('level', models.IntegerField()),
                ('classification', models.CharField(blank=True, max_length=512)),
                ('description', models.TextField()),
                ('effect', models.TextField(blank=True)),
                ('upcast_effect', models.TextField(blank=True)),
                ('saving_throw', models.CharField(blank=True, max_length=512)),
                ('casting_time', models.CharField(max_length=512)),
                ('duration', models.CharField(max_length=512)),
                ('components', models.CharField(max_length=512)),
                ('range', models.CharField(max_length=512)),
                ('target', models.CharField(max_length=512)),
                ('origin', models.CharField(max_length=512)),
                ('sub_origin', models.CharField(blank=True, max_length=512)),
                ('mastery_req', models.CharField(blank=True, max_length=512)),
                ('tags', models.TextField(blank=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('class_feature', models.OneToOneField(blank=True, help_text='If this is an inherent‐spell feature, store its full Spell here.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inherent_spell_data', to='characters.classfeature')),
            ],
        ),
        migrations.CreateModel(
            name='SubclassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_type', models.CharField(choices=[('linear', 'Linear (fixed level)'), ('modular_linear', 'Modular Linear (tiered)'), ('modular_mastery', 'Modular Mastery (pick & master)')], default='linear', max_length=20)),
                ('name', models.CharField(help_text="Umbrella/Order name (e.g. 'Moon Circle')", max_length=100)),
                ('code', models.CharField(blank=True, help_text='Optional shorthand code', max_length=20)),
                ('modular_rules', models.JSONField(blank=True, null=True)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subclass_groups', to='characters.characterclass')),
            ],
            options={
                'ordering': ['character_class', 'name'],
                'unique_together': {('character_class', 'name')},
            },
        ),
        migrations.AddField(
            model_name='classsubclass',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Which umbrella / order this belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subclasses', to='characters.subclassgroup'),
        ),
        migrations.AddField(
            model_name='classfeature',
            name='subclass_group',
            field=models.ForeignKey(blank=True, help_text='For a subclass_choice, pick the umbrella shown to the player.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choice_features', to='characters.subclassgroup'),
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('size', models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large')], default='medium', help_text='Small / Medium / Large', max_length=6)),
                ('primary_image', models.ImageField(blank=True, help_text='Upload the main portrait or icon for this race.', null=True, upload_to='race_images/primary/')),
                ('secondary_image', models.ImageField(blank=True, help_text='Upload a second image (e.g. a banner or alternate art) for this race.', null=True, upload_to='race_images/secondary/')),
                ('tertiary_image', models.ImageField(blank=True, help_text='Upload a thumbnail or list‐page image for this race.', null=True, upload_to='race_images/tertiary/')),
                ('speed', models.PositiveIntegerField(default=30)),
                ('strength_bonus', models.IntegerField(default=0, help_text='Strength increase')),
                ('dexterity_bonus', models.IntegerField(default=0, help_text='Dexterity increase')),
                ('constitution_bonus', models.IntegerField(default=0, help_text='Constitution increase')),
                ('intelligence_bonus', models.IntegerField(default=0, help_text='Intelligence increase')),
                ('wisdom_bonus', models.IntegerField(default=0, help_text='Wisdom increase')),
                ('charisma_bonus', models.IntegerField(default=0, help_text='Charisma increase')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subraces', to='characters.race')),
                ('tags', models.ManyToManyField(blank=True, to='characters.racetag')),
            ],
            options={
                'unique_together': {('race', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('half_elf_origin', models.CharField(blank=True, max_length=20)),
                ('bg_combo', models.CharField(blank=True, max_length=10)),
                ('main_background', models.CharField(blank=True, max_length=50)),
                ('side_background_1', models.CharField(blank=True, max_length=50)),
                ('side_background_2', models.CharField(blank=True, max_length=50)),
                ('HP', models.IntegerField(blank=True, null=True)),
                ('temp_HP', models.IntegerField(blank=True, null=True)),
                ('strength', models.IntegerField(default=8)),
                ('dexterity', models.IntegerField(default=8)),
                ('constitution', models.IntegerField(default=8)),
                ('intelligence', models.IntegerField(default=8)),
                ('wisdom', models.IntegerField(default=8)),
                ('charisma', models.IntegerField(default=8)),
                ('level', models.PositiveIntegerField(default=0)),
                ('backstory', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to='campaigns.campaign')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characters', to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to='characters.race')),
                ('subrace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to='characters.subrace')),
            ],
        ),
        migrations.CreateModel(
            name='SubSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subskills', to='characters.skillcategory')),
            ],
        ),
        migrations.AddField(
            model_name='classfeature',
            name='gain_subskills',
            field=models.ManyToManyField(blank=True, help_text='Select which sub-skills this feature grants proficiency in', related_name='gained_by_features', to='characters.subskill'),
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('primary_ability', models.CharField(choices=[('strength', 'Strength'), ('dexterity', 'Dexterity'), ('constitution', 'Constitution'), ('intelligence', 'Intelligence'), ('wisdom', 'Wisdom'), ('charisma', 'Charisma')], default='strength', help_text='Which ability gets the primary bonus', max_length=12)),
                ('primary_bonus', models.PositiveSmallIntegerField()),
                ('secondary_ability', models.CharField(choices=[('strength', 'Strength'), ('dexterity', 'Dexterity'), ('constitution', 'Constitution'), ('intelligence', 'Intelligence'), ('wisdom', 'Wisdom'), ('charisma', 'Charisma')], default='dexterity', help_text='Which ability gets the secondary bonus', max_length=12)),
                ('secondary_bonus', models.PositiveSmallIntegerField()),
                ('primary_skill', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='characters.subskill')),
                ('secondary_skill', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='characters.subskill')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WeaponTraitValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='Only used if trait.requires_value=True', max_length=50, null=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.weapontrait')),
                ('weapon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.weapon')),
            ],
            options={
                'unique_together': {('weapon', 'trait')},
            },
        ),
        migrations.AddField(
            model_name='weapon',
            name='traits',
            field=models.ManyToManyField(blank=True, through='characters.WeaponTraitValue', to='characters.weapontrait'),
        ),
        migrations.CreateModel(
            name='CharacterClassProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levels', models.PositiveIntegerField(default=0)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_progress', to='characters.character')),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.characterclass')),
            ],
            options={
                'unique_together': {('character', 'character_class')},
            },
        ),
        migrations.CreateModel(
            name='RacialFeature',
            fields=[
                ('classfeature_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='characters.classfeature')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='characters.race')),
                ('subrace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='characters.subrace')),
            ],
            options={
                'verbose_name': 'Racial Feature',
                'verbose_name_plural': 'Racial Features',
            },
            bases=('characters.classfeature',),
        ),
        migrations.CreateModel(
            name='RaceFeatureOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_options', to='characters.racialfeature')),
                ('grants_feature', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='race_granted_by_options', to='characters.racialfeature')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='classlevel',
            unique_together={('character_class', 'level')},
        ),
        migrations.CreateModel(
            name='ClassProficiencyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_type', models.CharField(choices=[('armor', 'Armor'), ('dodge', 'Dodge'), ('perception', 'Perception'), ('initiative', 'Initiative'), ('dc', 'Spell/DC'), ('reflex', 'Reflex Save'), ('fortitude', 'Fortitude Save'), ('will', 'Will Save'), ('weapon', 'Weapon')], max_length=20)),
                ('at_level', models.PositiveIntegerField(help_text='Level at which this tier becomes active')),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prof_progress', to='characters.characterclass')),
                ('tier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='characters.proficiencytier')),
            ],
            options={
                'ordering': ['character_class', 'proficiency_type', 'at_level'],
                'unique_together': {('character_class', 'proficiency_type', 'at_level')},
            },
        ),
        migrations.CreateModel(
            name='ClassResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formula', models.CharField(blank=True, help_text="Formula for how many points this class grants at a given level, e.g. 'ceil(level/2) + strength_modifier', or 'floor(level/3)+1', etc.", max_length=100)),
                ('max_points', models.IntegerField(default=0, help_text='Maximum pool size (0 = no cap)')),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='characters.characterclass')),
                ('resource_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.resourcetype')),
            ],
            options={
                'unique_together': {('character_class', 'resource_type')},
            },
        ),
        migrations.CreateModel(
            name='CharacterResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current', models.IntegerField(default=0)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pools', to='characters.character')),
                ('resource_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.resourcetype')),
            ],
            options={
                'unique_together': {('character', 'resource_type')},
            },
        ),
        migrations.CreateModel(
            name='RulebookPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', django_summernote.fields.SummernoteTextField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Lower numbers appear first')),
                ('rulebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='characters.rulebook')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('rulebook', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('rulebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='characters.rulebook')),
            ],
            options={
                'ordering': ['rulebook', 'order'],
                'unique_together': {('rulebook', 'order')},
            },
        ),
        migrations.CreateModel(
            name='CharacterSkillRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus_points', models.IntegerField(default=0, help_text='Allocated from ability score increases, NOT proficiency.')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_ratings', to='characters.character')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.skill')),
            ],
            options={
                'unique_together': {('character', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='SpellSlotRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5'), (6, 'Level 6'), (7, 'Level 7'), (8, 'Level 8'), (9, 'Level 9'), (10, 'Level 10'), (11, 'Level 11'), (12, 'Level 12'), (13, 'Level 13'), (14, 'Level 14'), (15, 'Level 15'), (16, 'Level 16'), (17, 'Level 17'), (18, 'Level 18'), (19, 'Level 19'), (20, 'Level 20')], help_text='Character level')),
                ('slot1', models.PositiveSmallIntegerField(default=0, help_text='1st-rank slots')),
                ('slot2', models.PositiveSmallIntegerField(default=0, help_text='2nd-rank slots')),
                ('slot3', models.PositiveSmallIntegerField(default=0, help_text='3rd-rank slots')),
                ('slot4', models.PositiveSmallIntegerField(default=0, help_text='4th-rank slots')),
                ('slot5', models.PositiveSmallIntegerField(default=0, help_text='5th-rank slots')),
                ('slot6', models.PositiveSmallIntegerField(default=0, help_text='6th-rank slots')),
                ('slot7', models.PositiveSmallIntegerField(default=0, help_text='7th-rank slots')),
                ('slot8', models.PositiveSmallIntegerField(default=0, help_text='8th-rank slots')),
                ('slot9', models.PositiveSmallIntegerField(default=0, help_text='9th-rank slots')),
                ('slot10', models.PositiveSmallIntegerField(default=0, help_text='10th-rank slots')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spell_slot_rows', to='characters.classfeature')),
            ],
            options={
                'ordering': ['level'],
                'unique_together': {('feature', 'level')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='classsubclass',
            unique_together={('base_class', 'name')},
        ),
        migrations.CreateModel(
            name='SubclassTierLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.PositiveIntegerField(help_text='Tier index (e.g. 1, 2, 3, …). Must match the integer suffix on feature.code.')),
                ('unlock_level', models.PositiveIntegerField(help_text='Class-level at which this tier becomes available.', null=True)),
                ('subclass_group', models.ForeignKey(help_text='Which group this mapping belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tier_levels', to='characters.subclassgroup')),
            ],
            options={
                'ordering': ['subclass_group', 'tier'],
                'unique_together': {('subclass_group', 'tier'), ('subclass_group', 'unlock_level')},
            },
        ),
        migrations.CreateModel(
            name='CharacterSubSkillProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subskill_proficiencies', to='characters.character')),
                ('proficiency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.proficiencylevel')),
                ('subskill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.subskill')),
            ],
            options={
                'unique_together': {('character', 'subskill')},
            },
        ),
        migrations.CreateModel(
            name='CharacterSkillProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_proficiencies', to='characters.character')),
                ('proficiency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.proficiencylevel')),
                ('subskill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.subskill')),
            ],
            options={
                'unique_together': {('character', 'subskill')},
            },
        ),
        migrations.CreateModel(
            name='CharacterFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(help_text='Character level when gained')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='characters.character')),
                ('feature', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='character_features', to='characters.classfeature')),
                ('subclass', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.classsubclass')),
                ('option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.featureoption')),
                ('racial_feature', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='racial_character_features', to='characters.racialfeature')),
            ],
            options={
                'unique_together': {('character', 'feature', 'option', 'subclass', 'level')},
            },
        ),
    ]
