# Generated by Django 5.1.6 on 2025-10-22 19:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0058_alter_specialitemtraitvalue_action_type_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='PrestigeClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(max_length=40, unique=True)),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('min_entry_level', models.PositiveSmallIntegerField(default=7, editable=False)),
                ('requires_gm_approval', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrestigePrerequisite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_index', models.PositiveSmallIntegerField(default=1, help_text='All groups are ANDed together. Inside a group, use the operator below.')),
                ('intragroup_operator', models.CharField(choices=[('AND', 'AND (all in this group)'), ('OR', 'OR (any in this group)')], default='AND', max_length=3)),
                ('min_class_level', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('feat_code', models.CharField(blank=True, help_text="Optional free text code for feat/other tag (e.g. 'feat_toughness').", max_length=80)),
                ('kind', models.CharField(choices=[('class_level', 'Class level (e.g., Fighter 5+)'), ('skill_tier', 'Skill proficiency (min tier)'), ('race', 'Race'), ('subrace', 'Subrace'), ('class_tag', 'Class Tag'), ('race_tag', 'Race Tag'), ('feat_code', 'Feat / other tag (free text code)')], max_length=20)),
                ('class_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.classtag')),
                ('min_tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.proficiencytier')),
                ('prestige_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prereqs', to='characters.prestigeclass')),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.race')),
                ('race_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.racetag')),
                ('skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.skill')),
                ('subrace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.subrace')),
                ('target_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.characterclass')),
            ],
            options={
                'ordering': ['prestige_class', 'group_index', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CharacterPrestigeEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gm_approved', models.BooleanField(default=False)),
                ('entered_at_character_level', models.PositiveSmallIntegerField(default=7)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prestige_enrollment', to='characters.character')),
                ('prestige_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='characters.prestigeclass')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('character',), name='uniq_one_prestige_per_character')],
            },
        ),
        migrations.CreateModel(
            name='PrestigeFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('at_prestige_level', models.PositiveSmallIntegerField()),
                ('code', models.SlugField(help_text='Unique within this prestige class.', max_length=60)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('grants_class_feature', models.ForeignKey(blank=True, help_text='Optional: link to an existing ClassFeature row to drive mechanics.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.classfeature')),
                ('prestige_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='characters.prestigeclass')),
            ],
            options={
                'ordering': ['prestige_class', 'at_prestige_level', 'name'],
                'unique_together': {('prestige_class', 'code')},
            },
        ),
        migrations.CreateModel(
            name='PrestigeLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(help_text='Prestige level (1 = entry; 1 is a dead level by rule).')),
                ('counts_as_mode', models.CharField(choices=[('fixed', 'Fixed — this level always counts as the class below'), ('choose', 'Choose at level-up — pick one of the allowed classes')], default='fixed', max_length=8)),
                ('allowed_counts_as', models.ManyToManyField(blank=True, help_text='Used only when mode = Choose.', to='characters.characterclass')),
                ('fixed_counts_as', models.ForeignKey(blank=True, help_text='Used only when mode = Fixed.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='characters.characterclass')),
                ('prestige_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='characters.prestigeclass')),
            ],
            options={
                'ordering': ['prestige_class', 'level'],
                'unique_together': {('prestige_class', 'level')},
            },
        ),
    ]
